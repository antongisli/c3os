[
{
	"uri": "https://docs.c3os.io/basics/architecture/",
	"title": "Architecture",
	"tags": [],
	"description": "",
	"content": "C3OS comes as ISO and as a CLI which can be downloaded from the release page. The CLI setups k3s and is also used to automatically register nodes in a private, user-defined network.\nCurrently Alpine-based and openSUSE-based flavors are available, they both supports autonomous kubernetes bootstrapping with the c3os CLI.\nC3OS nodes can also autonomously connect and configure each other via a P2P hybrid mesh, no network setup and no central server is needed in that case. They will reach each other also if they are in different networks and behind NAT, establishing a fixed, hybrid virtual network.\nArchitecture c3OS uses edgevpn to coordinate, automatically discover/configure and establish a p2p vpn network between the cluster nodes.\nThe connection happens in 3 stages, where the discovery is driven by DHT and mDNS (which can be selectively disabled/enabled)\n Discovery Gossip network Full connectivity  The initial installation is done with pairing via QR code. A QR code is displayed when booting from ISO, to allow deployment on situations where sending files or connecting remotely is inconvienent.\nFor mass-installation cloud-init can be used to drive automated installs.\n"
},
{
	"uri": "https://docs.c3os.io/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": "Basics Layout, Architecture, the CLI C3OS is a GNU/Linux distribution which is focused on bringing k3s on distributed environments with as less friction as possible.\n"
},
{
	"uri": "https://docs.c3os.io/installation/device_pairing/",
	"title": "Device Pairing",
	"tags": [],
	"description": "",
	"content": "For pairing a c3os node, you will use the c3os CLI which is downloadable as part of the releases from another machine, it will be used to pair and install a new node or join a node to an existing cluster.\nStart the c3os ISO Download and mount the ISO in either baremetal or a VM that you wish to use as a node for your cluster.\nIt doesn\u0026rsquo;t matter if you are joining a node to an existing cluster or creating a new one, the procedure is still the same.\nA GRUB menu will be displayed:\nThe first menu entry starts c3os in Decentralized Device Pairing pairing mode and is the default, while the second is reserved for manual installations.\nOnce booted the first entry, a boot splash screen will appear, and right after a QR code will be printed out of the screen Prepare a configuration config file In the machine you are using for bootstrapping (your workstation, a jumpbox, or ..)\nCreate a config file like the following, for example config.yaml:\nstages: network: - name: \u0026#34;Setup users\u0026#34; authorized_keys: c3os: - github:mudler c3os: network_token: \u0026#34;....\u0026#34; # Optionally, set a network id (for multiple clusters in the same network) # network_id: \u0026#34;dev\u0026#34; # Optionally set a role # role: \u0026#34;master\u0026#34;  If you are creating a new cluster, you need to create a new network token with the c3os CLI: c3os generate-token\n The configuration config file is in cloud-init syntax and you can customize it further to setup the machine behavior.\nPair the machine The VM once finished booting will print-out a QR code like the following:\nYou can use now the QR code to pair the machine by either providing a screenshot or photo of it, or by just calling c3os register which will take a screenshot by default:\nc3os register --reboot --device /dev/sda --config config.yaml We can also specify here if the machine after install needs to be rebooted (--reboot) or shut down (--poweroff). The cloud-init configuration file must be provided with the --config flag.\nOptionally we can specify an image where to extract the QR code from, by specifying an image file as argument:\nc3os register --device /dev/sda --config config.yaml \u0026lt;file.png\u0026gt; At this point, wait until the pairing is complete and the installation will start automatically in the new node.\nJoin new nodes To join new nodes, simply re-apply the process to new nodes by specifying the same config.yaml for all the machines. The machines will connect automatically between themselves, either remotely on local network.\nGet kubeconfig and connect to the nodes In the machine you are using for bootstrapping (your workstation, a jumpbox, or ..) run in a new terminal, and leave it open (CTRL+C to abort):\nc3os bridge --network-token \u0026lt;TOKEN\u0026gt; This command will create a tun device in your machine and will make possible to contact each node in the cluster.\nAn API is also available at localhost:8080.\nAfter a few moments of bootstrapping, you should be able to see your nodes in the \u0026ldquo;Machine\u0026rdquo; tab.\nIn an new terminal window run:\nc3os get-kubeconfig \u0026gt; kubeconfig You should be now able to use the kubeconfig file as usual.\nc3os bridge acts like kubectl proxy. you need to keep it open to operate the kubernetes cluster and access the API.\n "
},
{
	"uri": "https://docs.c3os.io/after_install/upgrades/",
	"title": "Upgrades",
	"tags": [],
	"description": "",
	"content": "Kubernetes Upgrades can be triggered from Kubernetes with system-upgrade-controller installed in your cluster. See the Elemental-toolkit documentation\nSystem upgrade controller needs to be installed in the cluster which is targeted for the upgrades, for example:\nkubectl apply -f https://raw.githubusercontent.com/rancher/system-upgrade-controller/master/manifests/system-upgrade-controller.yaml Then in order to trigger an upgrade, we need to create a new upgrade plan for the cluster. create a Plan resource like the following as upgrade.yaml:\n--- apiVersion: upgrade.cattle.io/v1 kind: Plan metadata: name: os-upgrade namespace: system-upgrade labels: k3s-upgrade: server spec: concurrency: 1 #version: latest version: \u0026#34;opensuse-v1.21.4-31\u0026#34; nodeSelector: matchExpressions: - {key: kubernetes.io/hostname, operator: Exists} serviceAccountName: system-upgrade cordon: true drain: force: true disableEviction: true upgrade: image: quay.io/c3os/c3os command: - \u0026#34;/usr/sbin/suc-upgrade\u0026#34; And apply it:\nkubectl apply -f upgrade.yaml You can use the version field in the resource to tweak the c3os version depending on the chosen flavor. Refer to system-upgrade-controller for documentation.\nManual Upgrades can be triggered manually as well from the nodes.\nTo upgrade to latest available version, run from a shell of a cluster node:\nc3os upgrade To specify a version, just run\nc3os upgrade \u0026lt;version\u0026gt; Use --force to force upgrading to avoid checking versions. All the available versions can be list with: c3os upgrade list-releases.\nIt is possible altough to use the same commandset from Elemental-toolkit. So for example, the following works too:\nelemental upgrade --no-verify --docker-image quay.io/c3os/c3os:opensuse-v1.21.4-22 c3os images are released on quay.io.\nSee also the general Elemental-toolkit documentation which applies for c3os as well.\n"
},
{
	"uri": "https://docs.c3os.io/installation/automated/",
	"title": "Automated installation",
	"tags": [],
	"description": "",
	"content": "Automated installation is available as well aside of manual pairing.\nA cloud-init of the following form can be supplied as a datasource (CDROM, cos.setup bootarg):\n#cloud-init c3os: device: \u0026#34;/dev/sda\u0026#34; reboot: true poweroff: true offline: true # Required, for automated installations network_token: .... # extra configuration which will drive the installation automatically on first boot.\nThe installer will kick in automatically and reboot/poweroff if specified. Note, to trigger the automatic installation the offline field must be enabled.\n"
},
{
	"uri": "https://docs.c3os.io/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "Installing c3os on baremetal, VMs, \u0026hellip; Automated, Paired and take over install "
},
{
	"uri": "https://docs.c3os.io/installation/interactive_install/",
	"title": "Interactive installation",
	"tags": [],
	"description": "",
	"content": "Start the c3os ISO Download and mount the ISO in either baremetal or a VM that you wish to use as a node for your cluster.\nIt doesn\u0026rsquo;t matter if you are joining a node to an existing cluster or creating a new one, the procedure is still the same.\nA GRUB menu will be displayed:\nSelect the third entry (c3os (interactive install)).\nA boot splash screen will appear, and right after a prompt, asking for installation settings: After entering all the details, the installation will start, returning finally at the shell.\nThe interactive installer can be also started manually with c3os interactive-install from the LiveCD.\n "
},
{
	"uri": "https://docs.c3os.io/basics/layout/",
	"title": "Layout",
	"tags": [],
	"description": "",
	"content": "c3OS is an immutable Distribution, built with the Elemental-toolkit.\nBy default, c3OS uses an immutable setup.\nA running system will look like as follows:\n/usr/local - persistent (COS_PERSISTENT) /oem - persistent (COS_OEM) /etc - ephemeral /usr - read only / immutable See also Elemental-toolkit docs.\n"
},
{
	"uri": "https://docs.c3os.io/after_install/paths/",
	"title": "Paths",
	"tags": [],
	"description": "",
	"content": "The following paths are relevant for c3os:\n   Path Description     /usr/local/.c3os/deployed Sentinel file written after bootstrapping is complete. Remove to retrigger automatic bootstrap   /usr/local/.c3os/lease IP Lease of the node in the network. Delete to change IP address of the node    "
},
{
	"uri": "https://docs.c3os.io/after_install/",
	"title": "After install",
	"tags": [],
	"description": "",
	"content": "I\u0026rsquo;m in, what now? See how to upgrade, and how to manage a c3os installation\n"
},
{
	"uri": "https://docs.c3os.io/basics/cli/",
	"title": "CLI",
	"tags": [],
	"description": "",
	"content": "A CLI is provided as part of releases associated to each c3os version.\nThe CLI can be used from an external machine to generate network tokens and pair nodes on first-boot.\n./c3os --help NAME: c3os - c3os (register|install) USAGE: [global options] command [command options] [arguments...] VERSION: 0.1 DESCRIPTION: c3os registers and installs c3os boxes AUTHOR: Ettore Di Giacinto COMMANDS: register create-config, c generate-token, g setup, s get-kubeconfig install, i help, h Shows a list of commands or help for one command create-config Generates a new c3os configuration file which can be used as cloud-init, with a new unique network token:\n$ ./c3os create-config c3os: network_token: b3RwOgogIGRodDoKICAgIGludGVydmFsOiA5MjIzMzcyMDM2ODU0Nzc1ODA3CiAgICBrZXk6IEVCMzJJMlNXTjJCNFBHNEtCWTNBUVBBS0FWRTY0Q0VLVUlDTktTUFVWVU5BWTM0QklEQ0EKICAgIGxlbmd0aDogMzIKICBjcnlwdG86CiAgICBpbnRlcnZhbDogOTIyMzM3MjAzNjg1NDc3NTgwNwogICAga2V5OiBDMk1RRk5DWEFVRElPWjVHM1pZUUIzVEVHTzVXVEdQR1pZSEVQQkY3SFEyVUROUlZCTkxRCiAgICBsZW5ndGg6IDMyCnJvb206IGp6Q29kQVVOWUZSUklQU3JISmx4d1BVUnVxTGJQQnh4CnJlbmRlenZvdXM6IG5NckRCbllyVVBMdnFPV0Z2dWZvTktXek1adEJIRmpzCm1kbnM6IGpQUUhIbVZza2x6V29xbWNkeVlnbVhMSVFjTE1HUFN6Cm1heF9tZXNzYWdlX3NpemU6IDIwOTcxNTIwCg== offline: false reboot: false device: \u0026quot;\u0026quot; poweroff: false Now you can use this in your configuration file to create new c3os nodes:\nc3os: network_token: b3RwOgogIGRodDoKICAgIGludGVydmFsOiA5MjIzMzcyMDM2ODU0Nzc1ODA3CiAgICBrZXk6IEVCMzJJMlNXTjJCNFBHNEtCWTNBUVBBS0FWRTY0Q0VLVUlDTktTUFVWVU5BWTM0QklEQ0EKICAgIGxlbmd0aDogMzIKICBjcnlwdG86CiAgICBpbnRlcnZhbDogOTIyMzM3MjAzNjg1NDc3NTgwNwogICAga2V5OiBDMk1RRk5DWEFVRElPWjVHM1pZUUIzVEVHTzVXVEdQR1pZSEVQQkY3SFEyVUROUlZCTkxRCiAgICBsZW5ndGg6IDMyCnJvb206IGp6Q29kQVVOWUZSUklQU3JISmx4d1BVUnVxTGJQQnh4CnJlbmRlenZvdXM6IG5NckRCbllyVVBMdnFPV0Z2dWZvTktXek1adEJIRmpzCm1kbnM6IGpQUUhIbVZza2x6V29xbWNkeVlnbVhMSVFjTE1HUFN6Cm1heF9tZXNzYWdlX3NpemU6IDIwOTcxNTIwCg== offline: false reboot: false device: \u0026#34;\u0026#34; poweroff: false # Cloud init syntax to setup users.  # See https://rancher.github.io/elemental-toolkit/docs/reference/cloud_init/ stages: network: - name: \u0026#34;Setup users\u0026#34; authorized_keys: c3os: - github:yourhandle! generate-token Generates a new network token which can be used in a configuration file:\n$ ./c3os generate-token b3RwOgogIGRodDoKICAgIGludGVydmFsOiA5MjIzMzcyMDM2ODU0Nzc1ODA3CiAgICBrZXk6IFhMMjRYUk1MTlFOQ1pJQTU0SVFLQ1laMk83SENQWEFBU1ZKN0tZSTQ3MzVaUkpKSktRSEEKICAgIGxlbmd0aDogMzIKICBjcnlwdG86CiAgICBpbnRlcnZhbDogOTIyMzM3MjAzNjg1NDc3NTgwNwogICAga2V5OiBMR1dMWFBTUllaU0ZERDdOT0pBNzdKV0ZWQjRHVkZBMjJIWlZPWU1VT0lNSFVYNFZXUURRCiAgICBsZW5ndGg6IDMyCnJvb206IFRtcUt5VnFHQ1ZZam9TRm9CTEVNRGVEdmJzelBkVEdoCnJlbmRlenZvdXM6IGttb3J4Q21sY2NjVVppWmdkSW5xTERvTGJtS3ZGdm9mCm1kbnM6IEZkWVdQc2R4aHdvWHZlb0VzSXNnVHRXbEJUbE9IVHJmCm1heF9tZXNzYWdlX3NpemU6IDIwOTcxNTIwCg== And now:\nc3os: network_token: b3RwOgogIGRodDoKICAgIGludGVydmFsOiA5MjIzMzcyMDM2ODU0Nzc1ODA3CiAgICBrZXk6IFhMMjRYUk1MTlFOQ1pJQTU0SVFLQ1laMk83SENQWEFBU1ZKN0tZSTQ3MzVaUkpKSktRSEEKICAgIGxlbmd0aDogMzIKICBjcnlwdG86CiAgICBpbnRlcnZhbDogOTIyMzM3MjAzNjg1NDc3NTgwNwogICAga2V5OiBMR1dMWFBTUllaU0ZERDdOT0pBNzdKV0ZWQjRHVkZBMjJIWlZPWU1VT0lNSFVYNFZXUURRCiAgICBsZW5ndGg6IDMyCnJvb206IFRtcUt5VnFHQ1ZZam9TRm9CTEVNRGVEdmJzelBkVEdoCnJlbmRlenZvdXM6IGttb3J4Q21sY2NjVVppWmdkSW5xTERvTGJtS3ZGdm9mCm1kbnM6IEZkWVdQc2R4aHdvWHZlb0VzSXNnVHRXbEJUbE9IVHJmCm1heF9tZXNzYWdlX3NpemU6IDIwOTcxNTIwCg== offline: false reboot: false device: \u0026#34;\u0026#34; poweroff: false # Cloud init syntax to setup users.  # See https://rancher.github.io/elemental-toolkit/docs/reference/cloud_init/ stages: network: - name: \u0026#34;Setup users\u0026#34; authorized_keys: c3os: - github:yourhandle! register The register command can be used to register and drive installation of nodes via QR code with a cloud-init config file ( with --config).\nNAME: register - USAGE: register [command options] [arguments...] OPTIONS: --config value --device value --reboot --poweroff When booting c3os via ISO, the boot process ends up in displaying a QR code which can be parsed by c3os register from another machine.\nTaking a screenshot register by default takes a screenshot and tries to find a QR code in it:\nc3os register Providing a qrcode image/screenshot manually It can be also be specified an image:\nc3os register \u0026lt;file.png\u0026gt; After the pairing is done, the node will start installation with the provided options.\nA --device and a --config file are required in order to have a functional installation.\nbridge Connect to the nodes in the VPN p2p network by creating a tun device on the host.\nIt needs a --network-token($NETWORK_TOKEN) argument and exposes an API endpoint available at localhost:8080 to monitor the network status.\ninstall Called by c3os nodes on boot and not meant to be used manually. It kicks in the installation and the QR pairing process.\nsetup Called by c3os nodes on boot and not meant to be used manually. It prepares edgevpn and k3s bootstrapping the node and the VPN.\n"
},
{
	"uri": "https://docs.c3os.io/installation/manual/",
	"title": "Manual installation",
	"tags": [],
	"description": "",
	"content": "Manual installation is available as well aside of pairing and automated installation.\nDefault credentials If needed to connect over ssh, the system have an hardcoded username/password when booting from the LiveCD:\nuser: c3os pass: c3os  Note, after the installation the password login is disabled, so users and ssh keys to login must be configured via cloud-init.\n Login over SSH as the c3os user or via console with c3os:c3os and run:\nsudo elemental install --cloud-init $CONFIG Where the config can be a cloud-init file or a URL to it:\n#cloud-init c3os: network_token: .... # extra configuration Manual K3s configuration Automatic nodes configuration can be disabled by disabling the c3os block in the configuration file.\nIn that case, VPN is not configured, but you can still configure k3s automatically with the k3s and k3s-agent block:\nk3s: enabled: true # Additional env/args for k3s server instances env: K3S_RESOLV_CONF: \u0026#34;\u0026#34; K3S_DATASTORE_ENDPOINT: \u0026#34;mysql://username:password@tcp(hostname:3306)/database-name\u0026#34; args: - --cluster-init for agent:\nk3s-agent: enabled: true # Additional env/args for k3s server instances env: K3S_RESOLV_CONF: \u0026#34;\u0026#34; K3S_DATASTORE_ENDPOINT: \u0026#34;mysql://username:password@tcp(hostname:3306)/database-name\u0026#34; args: - --cluster-init See also the examples folder in the repository to configure k3s manually.\n"
},
{
	"uri": "https://docs.c3os.io/after_install/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "",
	"content": "Root permission By default there is no root user set. A default user (c3os) is created and can use sudo without password authentication during LiveCD bootup.\nGet kubeconfig On all nodes of the cluster it\u0026rsquo;s possible to invoke c3os get-kubeconfig to recover the kubeconfig file\nConnect to the cluster network Network tokens can be used to connect to the VPN created by the cluster. They are indeed tokens of edgevpn networks, and thus can be used to connect to with its CLI.\nThe c3os CLI can be used to connect as well, with the bridge command:\nsudo c3os bridge --network-token \u0026lt;TOKEN\u0026gt;  The command needs root permissions as it sets up a local tun interface to connect to the VPN.\n Afterward you can connect to localhost:8080 to access the network API and verify machines are connected.\nSee edgeVPN documentation on how to connect to the VPN with the edgeVPN cli, which is similar:\nEDGEVPNTOKEN=\u0026lt;network_token\u0026gt; edgevpn --dhcp Setup process c3os node at first boot will start the c3os-agent service, you can always check what\u0026rsquo;s happening by running journalctl -fu c3os-agent.\nThis service will setup k3s and edgevpn dynamically on first-boot, once it configures the machine it does not run on boot anymore, unless /usr/local/.c3os/deployed is removed..\nThose are the steps executed in sequence by the c3os-agent service:\n Will create a edgevpn@c3os service and enabled on start. The configuration for the connection is stored in /etc/systemd/system.conf.d/edgevpn-c3os.env and depends on the cloud-init configuration file provided during installation time Automatic role negotiation starts, nodes will co-ordinate for an IP and a role Once roles are defined a node will either set the k3s or k3s-agent service. Configuration for each service is stored in /etc/sysconfig/k3s and /etc/sysconfig/k3s-agent respectively  "
},
{
	"uri": "https://docs.c3os.io/installation/configuration/",
	"title": "Configuration reference",
	"tags": [],
	"description": "",
	"content": "A c3os node during pairing or either automated install can be configured via a single configuration file.\nc3os: network_token: \u0026#34;....\u0026#34; # Device for offline installs device: \u0026#34;/dev/sda\u0026#34; # Reboot after installation reboot: true # Power off after installation poweroff: true # Set to true when installing without Pairing offline: true # Manually set node role. Available: master, worker. Defaults auto (none) role: \u0026#34;master\u0026#34; # User defined network-id. Can be used to have multiple clusters in the same network network_id: \u0026#34;dev\u0026#34; # Enable embedded DNS See also: https://mudler.github.io/edgevpn/docs/concepts/overview/dns/ dns: true vpn: # EdgeVPN environment options DHCP: \u0026#34;true\u0026#34; # Disable DHT (for airgap) EDGEVPNDHT: \u0026#34;false\u0026#34; EDGEVPNMAXCONNS: \u0026#34;200\u0026#34; # If DHCP is false, it\u0026#39;s required to be given a specific node IP. Can be arbitrary ADDRESS: \u0026#34;10.2.0.30/24\u0026#34; # See all EDGEVPN options: # - https://github.com/mudler/edgevpn/blob/master/cmd/util.go#L33 # - https://github.com/mudler/edgevpn/blob/master/cmd/main.go#L48 k3s: # Additional env/args for k3s server instances env: K3S_RESOLV_CONF: \u0026#34;\u0026#34; K3S_DATASTORE_ENDPOINT: \u0026#34;mysql://username:password@tcp(hostname:3306)/database-name\u0026#34; args: - --label \u0026#34;\u0026#34; - --data-dir \u0026#34;\u0026#34; # Enabling below it replaces args/env entirely # replace_env: true # replace_args: true k3s-agent: # Additional env/args for k3s agent instances env: K3S_NODE_NAME: \u0026#34;foo\u0026#34; args: - --private-registry \u0026#34;...\u0026#34; # Enabling below it replaces args/env entirely # replace_env: true # replace_args: true # Cloud init syntax to setup users.  # See https://rancher.github.io/elemental-toolkit/docs/reference/cloud_init/ stages: network: - name: \u0026#34;Setup users\u0026#34; authorized_keys: c3os: - github:mudler Syntax c3os supports the standard cloud-init syntax and the extended one from the Elemental-toolkit.\nExamples using the extended notation for running k3s as agent or server are in examples.\nDatasource The configuration file can also be used to drive automated installation and deployments by mounting an ISO in the node with the cidata label. The ISO must contain a user-data (which contain your configuration) and meta-data file.\nISO as datasource Optionally it\u0026rsquo;s possible to pass by the configuration by mounting an additional iso to the VM with the cloud config.\nTo create an ISO as datasource, generate an ISO with the configuration file, for example:\n$ mkdir -p build $ cd build $ touch meta-data $ cp -rfv cloud_init.yaml user-data $ mkisofs -output ci.iso -volid cidata -joliet -rock user-data meta-data Embedded DNS When c3os.dns is set to true embedded DNS is configured on the node. This allows to propagate custom records to the nodes by using the blockchain DNS server, for example, assuming c3os bridge is running in a separate terminal:\ncurl -X POST http://localhost:8080/api/dns --header \u0026#34;Content-Type: application/json\u0026#34; -d \u0026#39;{ \u0026#34;Regex\u0026#34;: \u0026#34;foo.bar\u0026#34;, \u0026#34;Records\u0026#34;: { \u0026#34;A\u0026#34;: \u0026#34;2.2.2.2\u0026#34; } }\u0026#39; Will add the foo.bar domain with 2.2.2.2 as A response.\nEvery node with dns enabled will be able to resolve the domain after the domain is correctly announced.\nYou can check out the dns in the DNS page in the API, see also the EdgeVPN docs.\nFurthermore, is possible to tweak DNS server which are used to forward requests for domain listed outside, and as well it\u0026rsquo;s possible to lock down resolving only to nodes in the blockchain, by customizing the configuration file:\nc3os: network_token: \u0026#34;....\u0026#34; # Enable embedded DNS See also: https://mudler.github.io/edgevpn/docs/concepts/overview/dns/ dns: true vpn: # Disable DNS forwarding DNSFORWARD: \u0026#34;false\u0026#34; # Set cache size DNSCACHESIZE: \u0026#34;200\u0026#34; # Set DNS forward server DNSFORWARDSERVER: \u0026#34;8.8.8.8:53\u0026#34; "
},
{
	"uri": "https://docs.c3os.io/after_install/recovery_mode/",
	"title": "Remote Recovery mode",
	"tags": [],
	"description": "",
	"content": "The c3os recovery mode can be used to recover a damaged system, or to regain access remotely (with assistance) to a machine which has been lost access to. The recovery mode is accessible only from the GRUB menu, from both the LiveCD and an installed system.\nOn installed system there are two recovery modes available during boot. Below it is described only how the c3os remote recovery works. The manual recovery entry has nothing special from the standard Elemental-toolkit recovery mode. It can be used to reset the A/B partitions (with the user/pass used during setup) and perform any other operation without remote access.\n Boot into recovery mode c3os recovery mode can be accessed either via ISO or from an installed system.\nA GRUB menu will be displayed: Select the last entry c3os (remote recovery mode) and press enter.\nAt this point the boot process starts and you should be welcomed by the c3os screen:\nAfter few second the recovery process starts, and right after a QR code will be printed out of the screen along with a password which can be used later on to SSH into the machine:\nAt this stage, take a screenshot or a photo, just save the image with the QR code.\nConnect to the machine In another machine you are using to connect to your server (your workstation, a jumpbox, or ..) use the c3os CLI to connect over the remote machine:\n$ ./c3os bridge --qr-code-image /path/to/image.png INFO Connecting to service kAIsuqiwKR INFO SSH access password is yTXlkak INFO SSH server reachable at 127.0.0.1:2200 INFO To connect, keep this terminal open and run in another terminal 'ssh 127.0.0.1 -p 2200' the password is yTXlkak INFO Note: the connection might not be available instantly and first attempts will likely fail. INFO Few attempts might be required before establishing a tunnel to the host. INFO Starting EdgeVPN network INFO Node ID: 12D3KooWSTRBCTNGZ61wzK5tgYvFi8rQVxkXJCDUYngBWGDSyoBK INFO Node Addresses: [/ip4/192.168.1.233/tcp/36071 /ip4/127.0.0.1/tcp/36071 /ip6/::1/tcp/37661] INFO Bootstrapping DHT At this point the bridge should start, and you should be able to see connection messages in the terminal. You can connect to the remote machine by using ssh and pointing it locally at 127.0.0.1:2200. The username is not relevant, the password is print from the CLI.\nThe bridge operates in the foreground, so you have to kill by hitting CTRL-C.\n"
},
{
	"uri": "https://docs.c3os.io/installation/takeover/",
	"title": "Take over installation",
	"tags": [],
	"description": "",
	"content": "c3os supports takeover installations, see also the Elemental-toolkit docs here are few summarized steps:\n From the Dedicated control panel (OVH, Hetzner, etc.), boot in rescue mode install docker and run for example:  export DEVICE=/dev/sda export IMAGE=quay.io/mudler/c3os:v1.21.4-19 # A url pointing to a valid cloud-init config file. E.g. as a gist at gists.github.com export CONFIG_FILE=... docker run --privileged -v $DEVICE:$DEVICE -ti $IMAGE cos-installer --config $CONFIG_FILE --no-cosign --no-verify --docker-image $IMAGE $DEVICE  Switch back to booting from HD and reboot  "
},
{
	"uri": "https://docs.c3os.io/after_install/customizing/",
	"title": "Customizing the system image",
	"tags": [],
	"description": "",
	"content": "c3os is a container-based OS, if you want to change c3os and add a package it is required to build only a docker image.\nFor example:\nFROMquay.io/c3os/c3os:opensuse-latestRUN zypper in -y ...RUN export VERSION=\u0026#34;my-version\u0026#34;RUN envsubst \u0026#39;${VERSION}\u0026#39; \u0026lt;/etc/os-releaseThe image can be then used with c3os upgrade or with system-upgrade-controller for upgrades within Kubernetes.\n"
},
{
	"uri": "https://docs.c3os.io/installation/raspberry/",
	"title": "Raspberry",
	"tags": [],
	"description": "",
	"content": "c3os supports Rasperry Pi model 3 and 4 with 64bit architecture.\nYou can find arm64 raspberry images in the releases page. For example https://github.com/c3os-io/c3os/releases/download/v1.21.4-35/c3os-opensuse-arm-rpi-v1.21.4-35.img.tar.xz.\nFlash the image into a SD card with dd or Etcher and place your cloud-init configuration file inside the cloud-config directory ( create it if not present ) into the COS_PERSISTENT partition, for example cloud-config/cloud-init.yaml.\n"
},
{
	"uri": "https://docs.c3os.io/after_install/configuration/",
	"title": "Configuring a node after install",
	"tags": [],
	"description": "",
	"content": "c3os configuration mechanism is all based on cloud-config file.\nBy default, c3os reads in lexicographic order YAML cloud-config files in the /usr/local/cloud-config and /oem directories.\nFor instance, you should be able to see the configuration generated by the interactive-installer in the /oem/99_custom.yaml config file.\nThis mechanism can be used to set and enable persistent configuration on boot.\nExamples Below you will find some examples on how to use the cloud-config mechanism to enable/disable specific features.\nEnabling ZRAM on boot Copy the following file in /oem/100_zram.yaml or /usr/local/cloud-config/100_zram.yaml:\nstages: boot: - name: \u0026#34;zram setup\u0026#34; commands: - modprobe zram - echo lzo \u0026gt; /sys/block/zram0/comp_algorithm - echo 1G \u0026gt; /sys/block/zram0/disksize - mkswap --label zram0 /dev/zram0 - swapon --priority 100 /dev/zram0 name: \u0026#34;zfs setup\u0026#34; This YAML will run the commands on boot enabling zram as swap.\n"
},
{
	"uri": "https://docs.c3os.io/installation/examples/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": "In the following section you can find example configuration files to achieve specific c3os setups.\nSingle node cluster By default c3os requires multiple nodes. As for the c3os decentralized nature, it requires co-ordination between at least 2 nodes to achieve consensus on IPs, network setting, etc.\nIn order to create single-node cluster, we need to force both the role and the ip by disabling DHCP:\nc3os: network_token: \u0026#34;....\u0026#34; role: \u0026#34;master\u0026#34; vpn: # EdgeVPN environment options DHCP: \u0026#34;false\u0026#34; ADDRESS: \u0026#34;10.1.0.2/24\u0026#34; Note, the same setup can be used to specify master nodes in a set, as to join nodes it is still possible without specifying any extra setting:\nc3os: network_token: \u0026#34;....\u0026#34; As always, IPs here are arbitrary as they are virtual ips in the VPN which is created between the cluster nodes.\nRun only k3s without VPNs c3os can be also used without any VPN and P2P network. Infact, k3s is already pre-installed, and it is sufficient to not specify any c3os block in the cloud init configuration.\nFor example, to start k3s as a server with c3os it\u0026rsquo;s sufficient to specify the k3s service in the config file:\nname: \u0026#34;Default deployment\u0026#34; stages: network: - if: \u0026#39;[ ! -f \u0026#34;/run/cos/recovery_mode\u0026#34; ]\u0026#39; name: \u0026#34;Setup k3s\u0026#34; environment_file: \u0026#34;/etc/sysconfig/k3s\u0026#34; environment: K3S_TOKEN: \u0026#34;...\u0026#34; systemctl: start: - k3s And similarly for an agent:\nname: \u0026#34;Default deployment\u0026#34; stages: network: - if: \u0026#39;[ ! -f \u0026#34;/run/cos/recovery_mode\u0026#34; ]\u0026#39; name: \u0026#34;Setup k3s\u0026#34; environment_file: \u0026#34;/etc/sysconfig/k3s-agent\u0026#34; environment: K3S_TOKEN: \u0026#34;...\u0026#34; systemctl: start: - k3s-agent Single node cluster with default user/password c3os: network_token: \u0026#34;....\u0026#34; role: \u0026#34;master\u0026#34; vpn: # EdgeVPN environment options DHCP: \u0026#34;false\u0026#34; ADDRESS: \u0026#34;10.1.0.2/24\u0026#34; stages: initramfs: - name: \u0026#34;Set user and password\u0026#34; users: c3os: passwd: \u0026#34;c3os\u0026#34; "
},
{
	"uri": "https://docs.c3os.io/",
	"title": "",
	"tags": [],
	"description": "",
	"content": "C3os C3OS is a lightweight Kubernetes-focused GNU/Linux derivative built with Elemental-toolkit that optionally supports automatic node discovery, automatic role assignment and optionally VPN out of the box with no kubernetes networking configuration required.\nC3OS can also create multi-nodes Kubernetes cluster with k3s that connects autonomously in a hybrid P2P mesh VPN which bridges nodes without any central server, also behind nat, or it can be just used standalone as a k3s server.\nC3OS is entirely backed up by community, It\u0026rsquo;s Free and Open Source, under the Apache 2.0 License. Feel free to open issues or contribute with PRs!\n No infrastructure is required. C3OS can be used to bootstrap a cluster entirely from the ground-up. LAN, remote networks, multi-region/zones, NAT - No network configuration or opening port outside is required. Nodes will connect each other via holepunching and using hops wherever necessary. Zero kubernetes configuration - Nodes autonomously discover and configure themselves to form a Kubernetes cluster. The same configuration/bootstrapping process applies wether creating new clusters or joining nodes to existing one. Secure P2P Remote recovery to restore failed nodes or lost credentials Hybrid P2P mesh between nodes (optional)  It comes in two variants, based on openSUSE and Alpine.\nConfiguration and installation is done via Decentralized Device Pairing, cloud-init for manual/automated mass-installs or interactively.\nc3OS have:\n an Immutable layout cloud-init support P2P hybrid layer (optional, which can be disabled) Strong enphasis on automation - the only configuration which is required is to generate a network token (optional) Embedded cluster DNS (optional)  c3OS is composed of:\n k3s as a Kubernetes distribution edgevpn as fabric for the distributed network, node coordination and bootstrap. Provides also embedded DNS capabilities for the cluster. element-toolkit as a fundament to build the Linux derivative. Indeed, any Elemental docs applies to c3os as well. nohang A sophisticated low memory handler for Linux  "
},
{
	"uri": "https://docs.c3os.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://docs.c3os.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]