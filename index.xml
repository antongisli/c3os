<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>c3os documentation</title>
    <link>https://docs.c3os.io/</link>
    <description>Recent content on c3os documentation</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Feb 2022 17:56:26 +0100</lastBuildDate><atom:link href="https://docs.c3os.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Container based OS</title>
      <link>https://docs.c3os.io/architecture/container/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/architecture/container/</guid>
      <description>c3os is a container-based OS.
A container based OS is an OS which is shipped via containers. Indeed, if it happens to be based on Linux (most probably) you can run the container image as well on your docker daemon. The image being being booted is the container, which contains all the required pieces in order to boot (Kernel, Initrd, Init system).
Benefits of using containers to distribute upgrades Container registries are already widely supported and used by anyone.</description>
    </item>
    
    <item>
      <title>Immutable layout</title>
      <link>https://docs.c3os.io/architecture/immutable/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/architecture/immutable/</guid>
      <description>c3os adopts an Immutable layout, and derivatives created with its toolkit inherits the same immutability aspects.
An immutable OS is a carefully engineered system which boots in a restricted, permissionless mode, where certain paths of the system are not writeable. For instance, after installation it&amp;rsquo;s not possible to install additional packages in the system, and any configuration change is discarded after reboot.
A running Linux based OS system will look like with the following paths:</description>
    </item>
    
    <item>
      <title>Installation</title>
      <link>https://docs.c3os.io/quickstart/installation/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/quickstart/installation/</guid>
      <description>Introduction The c3OS relases ships for user convenience a set of artifacts that can be used to install c3os on a node. However, c3OS Kubernetes Native components allows to create such artifacts inside Kubernetes from a set of input images.
In the quickstart below we will use the artifacts generated by the c3os releases as we assume we don&amp;rsquo;t have any prior Kubernetes cluster available.
Most of the operations are completely automated, so there is little interaction needed with the Kubernetes components.</description>
    </item>
    
    <item>
      <title>Manual</title>
      <link>https://docs.c3os.io/upgrade/manual/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/upgrade/manual/</guid>
      <description>Upgrades can be run manually from the terminal.
c3os images are released on quay.io.
List available versions To see all the available versions:
$ sudo c3os-agent upgrade list-releases v0.57.0 v0.57.0-rc2 v0.57.0-rc1 v0.57.0-alpha2 v0.57.0-alpha1 Upgrade To upgrade to latest available version, run from a shell of a cluster node:
sudo c3os-agent upgrade To specify a version, just run
sudo c3os-agent upgrade &amp;lt;version&amp;gt; Use --force to force upgrading to avoid checking versions.</description>
    </item>
    
    <item>
      <title>Manual installation</title>
      <link>https://docs.c3os.io/installation/manual/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/installation/manual/</guid>
      <description>To install manually, follow the quickstart. When the QR code is prompted at the screen, you should be able to login via SSH to the box with the password c3os as c3os user.
Note, after the installation the password login is disabled, users and ssh keys to login must be configured via cloud-init.
 Installation To start the installation, run from the console:
sudo elemental install --device /dev/sda --cloud-init $CONFIG Where the config can be a cloud-init file or a URL to it:</description>
    </item>
    
    <item>
      <title>Meta-Distribution</title>
      <link>https://docs.c3os.io/architecture/meta/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/architecture/meta/</guid>
      <description>We like to define c3os as a meta Linux Distribution as its goal is to convert any other distro to an immutable layout with Kubernetes Native components.
c3OS The c3OS stack is composed of the following:
 A core OS image release for each flavor in ISO, qcow2, and similar format (currently can pick from openSUSE and Alpine based) - provided for user convenience A release with k3s embedded A set of Kubernetes Native API components (CRDs) to install into the control-plane node, to manage deployment, artifacts creation, and lifecycle (WIP) A set of Kubernetes Native API components (CRDs) to install into the target nodes to manage and control the node after deployment (WIP) An agent installed into the nodes to be compliant with Kubernetes Native API components mentioned above  Every component is extensible and modular such as it can be customized and replaced in the stack, and built off either locally or with Kubernetes</description>
    </item>
    
    <item>
      <title>P2P Network</title>
      <link>https://docs.c3os.io/architecture/network/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/architecture/network/</guid>
      <description>c3OS can automatically setup a VPN between the nodes using edgevpn. This also allows the nodes to automatically coordinate, discover/configure and establish a network overlay spanning across multiple regions.
The connection happens in 3 stages, where the discovery is driven by DHT and mDNS (which can be selectively disabled/enabled)
 Discovery Gossip network Full connectivity  </description>
    </item>
    
    <item>
      <title>Upgrading from Kubernetes</title>
      <link>https://docs.c3os.io/upgrade/kubernetes/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/upgrade/kubernetes/</guid>
      <description>c3OS upgrades can be driven either manually or via Kubernetes. In order to trigger upgrades it is required to apply a CRD to the target cluster for the upgrade.
Upgrading from version X to version Y with Kubernetes To upgrade a node it is necessary system-upgrade-controller to be deployed in the target cluster.
To install it, use kubectl:
kubectl apply -f https://raw.githubusercontent.com/rancher/system-upgrade-controller/master/manifests/system-upgrade-controller.yaml To trigger an upgrade, create a plan for the system-upgrade-controller which refers to the image version that we want to upgrade.</description>
    </item>
    
    <item>
      <title>Interactive installation</title>
      <link>https://docs.c3os.io/installation/interactive/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/installation/interactive/</guid>
      <description>The interactive installation can be accessed from the LiveCD and guides the user into the installation process.
It generates a configuration file, which is later accessible after installation at /oem/99_custom.yaml.
From the boot menu When loading any c3os ISOs, a GRUB menu like the following will be displayed. To access the interactive installation, select the third entry (c3os (interactive install)).
Manually The interactive installer can be also started manually with c3os-agent interactive-install from the LiveCD.</description>
    </item>
    
    <item>
      <title>Paths</title>
      <link>https://docs.c3os.io/reference/paths/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/reference/paths/</guid>
      <description>The following paths are relevant for c3os:
   Path Description     /usr/local/.c3os/deployed Sentinel file written after bootstrapping is complete. Remove to retrigger automatic bootstrap   /usr/local/.c3os/lease IP Lease of the node in the network. Delete to change IP address of the node    </description>
    </item>
    
    <item>
      <title>Automated installation</title>
      <link>https://docs.c3os.io/installation/automated/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/installation/automated/</guid>
      <description>It is possible to drive the installation automatically by configuring a specific portion of the configuration file (install). The configuration file can be supplied then in various way, by either creating an additional ISO to mount ( if a VM, or burn to USB stick if baremetal), specifying a config via URL or even create a ISO from a container image with an embedded config file, which we are going to explore here.</description>
    </item>
    
    <item>
      <title>CLI</title>
      <link>https://docs.c3os.io/reference/cli/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/reference/cli/</guid>
      <description>A CLI is provided as part of releases associated to each c3os version.
The CLI can be used from an external machine to generate network tokens and pair nodes on first-boot.
./c3os --help NAME: c3os - c3os (register|install) USAGE: [global options] command [command options] [arguments...] VERSION: 0.1 DESCRIPTION: c3os registers and installs c3os boxes AUTHOR: Ettore Di Giacinto COMMANDS: register create-config, c generate-token, g setup, s get-kubeconfig install, i help, h Shows a list of commands or help for one command create-config Generates a new c3os configuration file which can be used as cloud-init, with a new unique network token:</description>
    </item>
    
    <item>
      <title>Troubleshooting</title>
      <link>https://docs.c3os.io/reference/troubleshooting/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/reference/troubleshooting/</guid>
      <description>Root permission By default there is no root user set. A default user (c3os) is created and can use sudo without password authentication during LiveCD bootup.
Get kubeconfig On all nodes of the cluster it&amp;rsquo;s possible to invoke c3os get-kubeconfig to recover the kubeconfig file
Connect to the cluster network Network tokens can be used to connect to the VPN created by the cluster. They are indeed tokens of edgevpn networks, and thus can be used to connect to with its CLI.</description>
    </item>
    
    <item>
      <title>Configuration reference</title>
      <link>https://docs.c3os.io/reference/configuration/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/reference/configuration/</guid>
      <description>Here you can find a full reference of the fields available to configure a c3os node
#node-config # The c3os block enables the p2p full-mesh functionalities. # To disable, don&amp;#39;t specify one. c3os: # This is a network token used to establish the p2p full meshed network. # Don&amp;#39;t specify one to disable full-mesh functionalities. network_token: &amp;#34;....&amp;#34; # Manually set node role. Available: master, worker. Defaults auto (none). This is available  role: &amp;#34;master&amp;#34; # User defined network-id.</description>
    </item>
    
    <item>
      <title>Full P2P mesh support</title>
      <link>https://docs.c3os.io/installation/p2p/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/installation/p2p/</guid>
      <description>This feature is crazy and experimental!
 This section will guide on how to leverage the p2p full-mesh capabilities of c3os.
c3OS supports p2p full-mesh out of the box. That allows to seamelessly interconnect clusters and nodes from different regions into an unified overlay network, additionally, the same network is used for co-ordinating nodes automatically, allowing self-automated node bootstrap.
A hybrid network is automatically set up between all the nodes, as such there is no need to expose them over the Internet, and either expose the Kubernetes management API outside, reducing attacker&amp;rsquo;s exploiting surface.</description>
    </item>
    
    <item>
      <title>Remote Recovery mode</title>
      <link>https://docs.c3os.io/reference/recovery_mode/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/reference/recovery_mode/</guid>
      <description>The c3os recovery mode can be used to recover a damaged system, or to regain access remotely (with assistance) to a machine which has been lost access to. The recovery mode is accessible only from the GRUB menu, from both the LiveCD and an installed system.
On installed system there are two recovery modes available during boot. Below it is described only how the c3os remote recovery works. The manual recovery entry has nothing special from the standard Elemental-toolkit recovery mode.</description>
    </item>
    
    <item>
      <title>Customizing the system image</title>
      <link>https://docs.c3os.io/reference/customizing/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/reference/customizing/</guid>
      <description>c3os is a container-based OS, if you want to change c3os and add a package it is required to build only a docker image.
For example:
FROMquay.io/c3os/c3os:opensuse-latestRUN zypper in -y ...RUN export VERSION=&amp;#34;my-version&amp;#34;RUN envsubst &amp;#39;${VERSION}&amp;#39; &amp;lt;/etc/os-releaseThe image can be then used with c3os upgrade or with system-upgrade-controller for upgrades within Kubernetes.</description>
    </item>
    
    <item>
      <title>Raspberry</title>
      <link>https://docs.c3os.io/installation/raspberry/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/installation/raspberry/</guid>
      <description>c3os supports Rasperry Pi model 3 and 4 with 64bit architecture.
You can find arm64 raspberry images in the releases page. For example https://github.com/c3os-io/c3os/releases/download/v1.21.4-35/c3os-opensuse-arm-rpi-v1.21.4-35.img.tar.xz.
Flash the image into a SD card with dd or Etcher and place your cloud-init configuration file inside the cloud-config directory ( create it if not present ) into the COS_PERSISTENT partition, for example cloud-config/cloud-init.yaml.</description>
    </item>
    
    <item>
      <title>Common setup</title>
      <link>https://docs.c3os.io/examples/examples/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/examples/examples/</guid>
      <description>In the following section you can find example configuration files to achieve specific c3os setups.
Single node cluster By default c3os requires multiple nodes. As for the c3os decentralized nature, it requires co-ordination between at least 2 nodes to achieve consensus on IPs, network setting, etc.
In order to create single-node cluster, we need to force both the role and the ip by disabling DHCP:
c3os: network_token: &amp;#34;....&amp;#34; role: &amp;#34;master&amp;#34; vpn: # EdgeVPN environment options DHCP: &amp;#34;false&amp;#34; ADDRESS: &amp;#34;10.</description>
    </item>
    
    <item>
      <title>Configuring a node after install</title>
      <link>https://docs.c3os.io/examples/configuration/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/examples/configuration/</guid>
      <description>c3os configuration mechanism is all based on cloud-config file.
By default, c3os reads in lexicographic order YAML cloud-config files in the /usr/local/cloud-config and /oem directories.
For instance, you should be able to see the configuration generated by the interactive-installer in the /oem/99_custom.yaml config file.
This mechanism can be used to set and enable persistent configuration on boot.
Examples Below you will find some examples on how to use the cloud-config mechanism to enable/disable specific features.</description>
    </item>
    
    <item>
      <title>Take over installation</title>
      <link>https://docs.c3os.io/installation/takeover/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/installation/takeover/</guid>
      <description>c3os supports takeover installations, see also the Elemental-toolkit docs here are few summarized steps:
 From the Dedicated control panel (OVH, Hetzner, etc.), boot in rescue mode install docker and run for example:  export DEVICE=/dev/sda export IMAGE=quay.io/mudler/c3os:v1.21.4-19 # A url pointing to a valid cloud-init config file. E.g. as a gist at gists.github.com export CONFIG_FILE=... docker run --privileged -v $DEVICE:$DEVICE -ti $IMAGE cos-installer --config $CONFIG_FILE --no-cosign --no-verify --docker-image $IMAGE $DEVICE  Switch back to booting from HD and reboot  </description>
    </item>
    
    <item>
      <title>Netboot installation</title>
      <link>https://docs.c3os.io/installation/netboot/</link>
      <pubDate>Wed, 09 Feb 2022 17:56:26 +0100</pubDate>
      
      <guid>https://docs.c3os.io/installation/netboot/</guid>
      <description> This section is a work in progress!
 </description>
    </item>
    
  </channel>
</rss>
